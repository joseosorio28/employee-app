plugins {
	id 'java'
	id 'war'
	id 'jacoco'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.amaris'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'com.google.code.gson:gson:2.7'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
	environment "SPRING_PROFILES_ACTIVE", "test"
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	finalizedBy jacocoTestCoverageVerification
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/model/**",
					"**/advisor/**",
					"**/utils/**",
					"**/config/**",
					"**/*Application.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/model/**",
					"**/advisor/**",
					"**/utils/**",
					"**/config/**",
					"**/*Application.class"
			])
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

